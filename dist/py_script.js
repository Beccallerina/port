export var PyScript = "\nimport pandas as pd\nimport zipfile\n\ndef process():\n    yield render_start_page()\n\n    platforms = [\"Twitter\", \"Instagram\", \"Youtube\"]\n    for index, platform in enumerate(platforms):\n        meta_data = []        \n        meta_data.append((\"debug\", f\"{platform}: start\"))\n\n        data = None\n        while True:\n            meta_data.append((\"debug\", f\"{platform}: prompt file\"))\n            promptFile = prompt_file(platform, \"application/zip, text/plain\")\n            fileResult = yield render_donation_page(index+1, platform, promptFile)\n            if fileResult.__type__ == 'PayloadString':\n                meta_data.append((\"debug\", f\"{platform}: extracting file\"))\n                extractionResult = doSomethingWithTheFile(platform, fileResult.value)\n                if extractionResult != 'invalid':                \n                    meta_data.append((\"debug\", f\"{platform}: extraction successful, go to consent form\")) \n                    data = extractionResult\n                    break\n                else:\n                    meta_data.append((\"debug\", f\"{platform}: prompt confirmation to retry file selection\")) \n                    retry_result = yield render_donation_page(index+1, platform, retry_confirmation())\n                    if retry_result.__type__ == 'PayloadTrue':\n                        meta_data.append((\"debug\", f\"{platform}: skip due to invalid file\")) \n                        continue\n                    else:   \n                        meta_data.append((\"debug\", f\"{platform}: retry prompt file\")) \n                        break\n            else:\n                meta_data.append((\"debug\", f\"{platform}: skip to next step\")) \n                break\n\n        if data is not None:\n            meta_data.append((\"debug\", f\"{platform}: prompt consent\"))\n            prompt = prompt_consent(platform, data, meta_data)\n            consent_result = yield render_donation_page(index+1, platform, prompt)\n            if consent_result.__type__ == \"PayloadJSON\":\n                meta_data.append((\"debug\", f\"{platform}: donate consent data\"))\n                yield donate(platform, consent_result.value)\n\n    yield render_end_page()\n\n\ndef render_start_page():\n    page = PropsUIPageStart()\n    return CommandUIRender(page)\n\n\ndef render_end_page():\n    header = PropsUIHeader(Translatable({\n        \"en\": \"Thank you\",\n        \"nl\": \"Dank je wel\"\n    }))\n    page = PropsUIPageEnd(header)\n    return CommandUIRender(page)\n\n\ndef render_donation_page(index, platform, body):\n    header = PropsUIHeader(Translatable({\n        \"en\": f\"Step {index}: {platform}\",\n        \"nl\": f\"Stap {index}: {platform}\"\n    }))\n    page = PropsUIPageDonation(header, body, spinner())\n    return CommandUIRender(page)\n\n\ndef retry_confirmation():\n    text = Translatable({\n        \"en\": \"The selected file is invalid. Do you want to select a different file?\",\n        \"nl\": \"Het geselecteerde bestaand is ongeldig. Wil je een ander bestand selecteren ?\"\n    })\n    ok = Translatable({\n        \"en\": \"Different file\",\n        \"nl\": \"Ander bestand\"\n    })\n    cancel = Translatable({\n        \"en\": \"Cancel\",\n        \"nl\": \"Annuleren\"\n    })\n    return PropsUIPromptConfirm(text, ok, cancel)\n\n\ndef spinner():\n    return PropsUISpinner(Translatable({\n        \"en\": \"One moment please\",\n        \"nl\": \"Een moment geduld\"\n    }))\n\n\ndef prompt_file(platform, extensions):\n    title = Translatable({\n        \"en\": f\"Select {platform} file\",\n        \"nl\": f\"Selecteer {platform} bestand\"\n    })\n\n    description = Translatable({\n        \"en\": \"Please select this file so we can extract relevant information for our research.\",\n        \"nl\": \"Je kan deze file nu selecteren zodat wij er relevante informatie uit kunnen halen voor ons onderzoek.\"\n    })\n\n    return PropsUIPromptFileInput(title, description, extensions)\n\n\ndef doSomethingWithTheFile(platform, filename):\n    return extract_zip_contents(filename)\n\n\ndef extract_zip_contents(filename):\n    names = []\n    try:\n        file = zipfile.ZipFile(filename)\n        data = []\n        for name in file.namelist():\n            names.append(name)\n            info = file.getinfo(name)\n            data.append((name, info.compress_size, info.file_size))\n        return data\n    except:\n        return \"invalid\"        \n\n\ndef prompt_consent(id, data, meta_data):\n    title = Translatable({\n        \"en\": \"Extracted data\",\n        \"nl\": \"Gevonden gegevens\"\n    })\n\n    description = Translatable({\n        \"en\": \"Please have a good look at the extracted data before giving consent to use this data.\",\n        \"nl\": \"Bekijk de gegevens goed voordat je consent geeft om deze te gebruiken.\"\n    })\n\n    data_frame = pd.DataFrame(data, columns=[\"filename\", \"compressed size\", \"size\"])\n    table = PropsUIPromptConsentFormTable(\"zip_content\", \"The zip contains the following files:\", data_frame)\n    meta_frame = pd.DataFrame(meta_data, columns=[\"type\", \"message\"])\n    meta_table = PropsUIPromptConsentFormTable(\"log_messages\", \"Log messages:\", meta_frame)\n    return PropsUIPromptConsentForm(title, description, [table], [meta_table])\n\n\ndef donate(key, json_string):\n    return CommandSystemDonate(key, json_string)\n";
