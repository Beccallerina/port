export var PyScript = "\nimport pandas as pd\nimport zipfile\n\ndef process(sessionId):\n    yield donate(f\"{sessionId}-tracking\", '[{ \"message\": \"user entered script\" }]')\n\n    platforms = [\"Twitter\", \"Facebook\", \"Instagram\", \"Youtube\"]\n\n    subflows = len(platforms)\n    steps = 2\n    step_percentage = (100/subflows)/steps\n\n    # progress in %\n    progress = 0\n\n    for index, platform in enumerate(platforms):\n        meta_data = []        \n        meta_data.append((\"debug\", f\"{platform}: start\"))\n\n        # STEP 1: select the file\n        progress += step_percentage\n        data = None\n        while True:\n            meta_data.append((\"debug\", f\"{platform}: prompt file\"))\n            promptFile = prompt_file(platform, \"application/zip, text/plain\")\n            fileResult = yield render_donation_page(platform, promptFile, progress)\n            if fileResult.__type__ == 'PayloadString':\n                meta_data.append((\"debug\", f\"{platform}: extracting file\"))\n                extractionResult = doSomethingWithTheFile(platform, fileResult.value)\n                if extractionResult != 'invalid':                \n                    meta_data.append((\"debug\", f\"{platform}: extraction successful, go to consent form\")) \n                    data = extractionResult\n                    break\n                else:\n                    meta_data.append((\"debug\", f\"{platform}: prompt confirmation to retry file selection\")) \n                    retry_result = yield render_donation_page(platform, retry_confirmation(platform), progress)\n                    if retry_result.__type__ == 'PayloadTrue':\n                        meta_data.append((\"debug\", f\"{platform}: skip due to invalid file\")) \n                        continue\n                    else:   \n                        meta_data.append((\"debug\", f\"{platform}: retry prompt file\")) \n                        break\n            else:\n                meta_data.append((\"debug\", f\"{platform}: skip to next step\")) \n                break\n\n        # STEP 2: ask for consent\n        progress += step_percentage\n        if data is not None:\n            meta_data.append((\"debug\", f\"{platform}: prompt consent\"))\n            prompt = prompt_consent(platform, data, meta_data)\n            consent_result = yield render_donation_page(platform, prompt, progress)\n            if consent_result.__type__ == \"PayloadJSON\":\n                meta_data.append((\"debug\", f\"{platform}: donate consent data\"))\n                yield donate(f\"{sessionId}-{platform}\", consent_result.value)\n\n    yield render_end_page()\n\n\ndef render_end_page():\n    page = PropsUIPageEnd()\n    return CommandUIRender(page)\n\n\ndef render_donation_page(platform, body, progress):\n    header = PropsUIHeader(Translatable({\n        \"en\": platform,\n        \"nl\": platform\n    }))\n\n    footer = PropsUIFooter(progress)\n    page = PropsUIPageDonation(platform, header, body, footer)\n    return CommandUIRender(page)\n\n\ndef retry_confirmation(platform):\n    text = Translatable({\n        \"en\": f\"We can not process your {platform} file, please try again if you want to choose another file.\",\n        \"nl\": f\"We kunnen uw {platform} bestand niet verwerken, probeer opnieuw als u een ander bestand wilt kiezen.\"\n    })\n    ok = Translatable({\n        \"en\": \"Try again\",\n        \"nl\": \"Probeer opnieuw\"\n    })\n    cancel = Translatable({\n        \"en\": \"Continue\",\n        \"nl\": \"Verder\"\n    })\n    return PropsUIPromptConfirm(text, ok, cancel)\n\n\ndef prompt_file(platform, extensions):\n    description = Translatable({\n        \"en\": \"Please select this file so we can extract relevant information for our research.\",\n        \"nl\": \"Je kan deze file nu selecteren zodat wij er relevante informatie uit kunnen halen voor ons onderzoek.\"\n    })\n\n    return PropsUIPromptFileInput(description, extensions)\n\n\ndef doSomethingWithTheFile(platform, filename):\n    return extract_zip_contents(filename)\n\n\ndef extract_zip_contents(filename):\n    names = []\n    try:\n        file = zipfile.ZipFile(filename)\n        data = []\n        for name in file.namelist():\n            names.append(name)\n            info = file.getinfo(name)\n            data.append((name, info.compress_size, info.file_size))\n        return data\n    except:\n        return \"invalid\"        \n\n\ndef prompt_consent(id, data, meta_data):\n\n    table_title = Translatable({\n        \"en\": \"Zip file contents\",\n        \"nl\": \"Inhoud zip bestand\"\n    })\n\n    log_title = Translatable({\n        \"en\": \"Log messages\",\n        \"nl\": \"Log berichten\"\n    })\n\n    data_frame = pd.DataFrame(data, columns=[\"filename\", \"compressed size\", \"size\"])\n    table = PropsUIPromptConsentFormTable(\"zip_content\", table_title, data_frame)\n    meta_frame = pd.DataFrame(meta_data, columns=[\"type\", \"message\"])\n    meta_table = PropsUIPromptConsentFormTable(\"log_messages\", log_title, meta_frame)\n    return PropsUIPromptConsentForm([table], [meta_table])\n\n\ndef donate(key, json_string):\n    return CommandSystemDonate(key, json_string)\n";
