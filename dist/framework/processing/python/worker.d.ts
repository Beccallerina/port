declare function runCycle(userInput: any): void;
declare function unwrap(response: any): Promise<any>;
declare function copyFileToPyFS(file: any, resolve: any): void;
declare function initialise(): any;
declare function loadScript(script: any): void;
declare function pyWorker(): string;
declare let pyScript: any;
declare const pyPortApi: "\nclass Event:\n  def toDict(self):\n    return setType({}, \"Event\")\n\n\nclass EndOfFlow(Event):\n  __slots__ = \"result\"\n  def __init__(self, result):\n    self.result = result\n  def translate_result(self):\n    print(\"translate\")\n    data_output = []\n    for data in self.result:\n      df = data[\"data_frame\"]\n      data_output.append({\"id\": data[\"id\"], \"data_frame\": df.to_json()})\n    return {\n      \"title\": data[\"title\"],\n      \"data\": data_output,\n    }\n  def toDict(self):\n    print(\"toDict2\")\n    dict = toDict(super(), \"EndOfFlow\") \n    dict = dict | self.translate_result()\n    return dict\n  \n\nclass Command(Event):\n  def toDict(self):\n    return toDict(super(), \"Command\")\n\n\nclass Prompt(Command):\n  __slots__ = \"title\", \"description\"\n  def __init__(self, title, description):\n    self.title = title\n    self.description = description\n  def toDict(self):\n    dict = toDict(super(), \"Prompt\")\n    dict[\"title\"] = self.title.toDict()\n    dict[\"description\"] = self.description.toDict()\n    return dict\n\n\nclass FileInput(Prompt):\n  __slots__ = \"extensions\"\n  def __init__(self, title, description, extensions):\n    super().__init__(title, description)\n    self.extensions = extensions\n  def toDict(self):\n    dict = toDict(super(), \"FileInput\")\n    dict[\"extensions\"] = self.extensions\n    return dict\n\n\nclass RadioInput(Prompt):\n  def __init__(self, title, description, items):\n    super().__init__(title, description)\n    self.items = items\n  def toDict(self):\n    dict = toDict(super(), \"RadioInput\")\n    dict[\"items\"] = self.items\n    return dict\n\n\nclass Translatable:\n  __slots__ = \"translations\"\n  def __init__(self):\n    self.translations = {}\n  def add(self, locale, text):\n    self.translations[locale] = text\n    return self\n  def toDict(self):\n    return setType(self.translations, \"Translatable\")\n\n\ndef toDict(zuper, type):\n  return setType(zuper.toDict(), type)\n\n\ndef setType(dict, type):\n  key = \"__type__\"\n  seperator = \".\"\n\n  path = [type]\n  if key in dict:\n    path.insert(0, dict[key])\n  dict[key] = seperator.join(path)\n  return dict\n";
